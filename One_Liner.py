import functools

#MAP


for num in range (1,20):
    string = ""
    if num % 3 ==0:
        string = string + "Fizz"
    if num % 5 == 0:
        string = string + "Buzz"
    if num % 3 !=0 and num % 5 !=0:
        string = string + str(num)
    print(string)

print()

def combine_coins(coin,number):
    output = ''
    for i in number:
# אני רוצה לשרשר, לכן נשתמש במשתנה  מהשרשר שאיחלו נכניס את התוצאה שלנו, ובסוף נדפיס אותו
        output += coin + str(i) + ','
# איי, הוא המשתנה שרץ על הרשימה, והוא מקבל את המספר מהרשימה, ואליו אנחנו מצרפים את הסימן של המטבע, ואת הפסיק
# ignore the last comma.
    return output[:-1]

print (combine_coins("$",[1,2,3,4]))

#בכל איטרציה האיבר משורשר לפסיק ולסימן המטבע שנכניס, היא עוברת על זה ע"י לואלה
# וכל זה למחרוזת שנקראת output

print()

def squre (num):
    return num **2

list1 = [2,3,4,5,6]
new_list = []

for number in list1:
    new_list.append(squre(number))

print(new_list)

# Map מקבלת שם פונקציה, ועכשיו רשימה של ארגומטנים, מפעילה את הפוקנציה על כל אחד מהארגומנטים ברצף, ומחזירה את התוצאה כאובייקט חדש

result = map(squre,list1)
print(result)
# map - תריץ את הפעולה שלנו על כל אחד מהאברים ברשימה, לפי הסדר שהם מופיעים כל אחד בתורו
# והיא תחזיר לנו אובייקט חדש עם ‫שבו כל איבר הוא התוצאה ‫של הפונקציה ‫עם האיבר המתאים לו ברשימה המקורית.

#ואת כל זה נכניס לרשימה
print(list(result))
# אם לא נכניס את זה לרשימה פשוט נקבל רק את האובייקט ואנחנו רוצים מספרים

print()

# היא תקבל את שני הרשימות כאובייקטים, ובגלל שהפונקציה מקבל שני פרמטריםף היא בעצם תכפיל כל איבר ברשימה בתורו יחד עם האיבר ברשימה השני, וכל תוצאה היא תכניס לרשימה חדשה
print("Map:")
def magic(a, b):
    return a * b
list_one = [1, 2, -5, 6]
list_two = [2, -1, 3, 4]
print(list(map(magic, list_one, list_two)))

# בכל פעם נשמרת תוצאת הכפל, ובסוף מוחזר אובייקט, אשר מוסב לרשימה, המייצג את תוצאת המכפלה של שתי הרשימות.
# בכל פעם הפונקציה map לוקחת איבר אחד מכל אחת מן הרשימות שהועברו לה כארגומנטים ומפעילה עליהם את הפונקציה magic שכופלת את האיברים.

print()
print("Filter:")

#Filter and Reduce

#Filter
#בא להיות מסנן, אפשר להשתמש בפונקציה שנקראת
#.endswith("mp3")
#צריך כנראה ליצור אחת כזו
#שהיא עושה מסתכל על סיומת של קבצים
#ועל פיה נוכל לעשות נניח סינון של רשימת קבצים, למשל ע"י לולאה, ואז להכניס את כל הקבצים לרשימה חדשה

#Filter - אבל הוא מחזיר ערך ולא רק  אמת או שקר ,"True" עושה סינון, על פי ערך בוליאני, כלומר הוא מחזיר את הערך רק עבורו התנאי מקיים
#filter -  היא מקבלת קודם פונקציה ואז ארגומנט שאותו שממנו נרצה לסנן, את הרשימה שנסנן,Map כמו

#‫filter מריצה את הפונקציה הבוליאנית ‫is_mp3_file על כל אחד מן האיברים של רשימת המחרוזות my_files.
#אם הפונקציה הבוליאנית מחזירה True, איבר מתווסף לאובייקט התוצאה

def func(x):
    return x % 2 != 0
print(list(filter(func, range(10))))

# נזכיר filter, מחזירה ערך אחרי בדיקה בוליאנית
# בשאלה זו הודפסה רשימה המכילה את כל המספרים בין 0 ל-10 ששארית החלוקה שלהם ב-2 איננה אפס. כלומר, כל המספרים האי זוגיים.

print()
print("Reduce:")

#Reduce
#‫בדיוק בשביל זה יש לנו את reduce,‫הפעולה חוזרת על הרצף ‫ומצמצמת אותו לכדי ערך יחיד,
# צריך לייבא אותה מהספרייה Functools
# וגם היא מקבלת קודם כל פונקציה ואז את הרצף/רשימה שנרצה

#‫ומגדירים לה כפרמטרים פונקציה ורצף. ‫הפונקציה שמועברת כארגומנט ‫למעשה מגדירה את הפעולה המצמצמת.‫היא מקבלת שני פרמטרים ‫ומחזירה ערך אחד.
#‫בקריאה הראשונה של reduce לפונקציה ‫מועברים כארגומנטים שני האיברים ‫הראשונים מהרצף.
#‫בהמשך, הערך שחוזר מין הפונקציה משמש את reduce כארגומנט הראשון ‫בקריאה הבאה, ‫יחד עם האיבר הבא מן הרצף ‫בתור הארגומנט השני.
#‫הפעולה הזו חוזרת על עצמה ‫עד שנשאר ערך אחד שהוא הערך ש-reduce מחזירה.

def add (x,y):
    return x + y

shop_list = [200, 120,330,50]
print(functools.reduce(add,shop_list))



def f(a, b):
    if a < b:
        return a
    else:
        return b
# the functions returns the lowest value
print(functools.reduce(f, [47,11,42,102,13]))
# in the first time it will be 11
# the f = 11
# and actully it will remain the lowest values in the whole list
#הפונקציה reduce מקבלת כפרמטרים פונקציית מינימום ורשימת מספרים, ומחזירה ערך אחד שהוא התוצאה של ביצוע הפונקציה f על איברי הרשימה בזה אחר זה.

#סיכומון
#‫אז מה היה לנו? דיברנו על דרכים לכתיבת קוד קצר ‫והדגמנו בעזרת שלוש פונקציות,
# ‫map, כשרוצים להפעיל פונקציה מסוימת ‫על כל האיברים ברצף כלשהו ‫ולקבל רצף חדש של איברים.
# ‫filter, כשרוצים להסיר מרצף איברים לא רצויים, ‫בהינתן תנאי מסוים.
# ‫ו-reduce, כשרוצים להפעיל פונקציה מסוימת על פני כל הרצף ‫ולקבל כתוצאה ערך יחיד.

# initializer
# אם מעבירים ערך שלישי בפונקציית reduce, אז הוא יהיה ערך התחלתי שיצטרף לערך הראשון בפעם הראשונה שהפונקציה תגיב
# תמיד טוב להתחיל עם ערך כזה, כי פונקציית reduce מקבלת לפחות שני ערכים, ואם בטעות ניתקע עם ערך אחד, במקום לקבל שגיאה יהיה לנו initializer, שיתווסף לערך היחיד,
# ובכך יהיה לנו שני ערכים
