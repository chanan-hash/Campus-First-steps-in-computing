#דרכים קצרות ליצירת רשימה
#אנחנו מכירים שני דרכים לעשות פעולה על רשימה: האחת ע"י לולאת for,
#והשניה ע"י השימוש בפונקציית map

my_money_list =[]
# נעשה לולאה שתרוץ על המספרים מ 0 עד 99
for i in range(100):
# נשרשר לתוך הרשימה הזאת את כל הרשיבועים של המספרים האלה, שגפ יעלו בריבוע
    my_money_list.append(i**2)
print(my_money_list)

# עכשיו ע"H הפונקציה map
my_money_list2 = [2,4,5,6,7,8]
def sqr(n):
    return n**2
print(list(map(sqr,my_money_list2)))

#ועולה השאלה כיצד ניתן בשורה אחת לכתוב קוד שיעשה את אותו הדבר?
# יש משהו שנקרא "הרכבת רשימה" list comprehension
# היא נותנת לנו ליצור רשימה בצורה מקוצרת

my_money_list3 = [x**2 for x in range(100)]
# בתוך הסוגריים המרובעים נכניס את הפקונציה שנרצה, וע"י לולאה נרוץ על כל הרשימה שתהיה בטווח שנגדיר
#‫בתוך סוגריים מרובעים ‫נכתוב קודם כול את הפעולה לביצוע ‫על פי החוקיות בין האיברים,
# ‫ולאחר מכן לולאת for ‫שרצה על המספרים בטווח הרצוי.
# נשים לב שהפעולה על המשתנה שמתבצעת, חייב להיות אותו משתנה שירוץ על הלואלה, שהוא הרי נהיה המספר, הוא מגודר אחרי זה בלואלה כמספר
# אם נשים את הפעולה על המשתנה x ואז נרוץ על הלואלה עם המשתנה i,
# המשתנה שעליו מתבצעת הפעולה הוא לא אותו אחד שרץ בתוך הרשימה ועליו פעולת הפעולה
# אנחנו נקבל שגיאה, לכן חייב להיות תיאום
# המשתנה שמבצע/עליו מתבצעת הפעולה, חייב להיות המשתנה שירוץ גם הלולאה, שהוא יהיה המספר שתפעל עליו הפעולה,
# אחרת זה סתם יהיו שני מספרים שונים

print(my_money_list3)
#‫בסיום פעולת ההרכבה, ‫המשתנה my_money_list, ‫מצביע על רשימת חזקת המספרים שהתקבלה ‫כתוצאה מביצוע הפעולה על איברי הרצף.

#‫המבנה התחבירי של הרכבת רשימה ‫הוא כזה:
# ‫בתוך סוגריים מרובעים נכתוב ביטוי, ‫expression, ‫המתאר פעולה לביצוע ‫עבור כל איבר ברצף
# ‫ולאחריו לולאת for ‫שעוברת על רצף כלשהו.
# ‫בתום פעולת ההרכבה ‫מוחזרת הרשימה שיצרנו.
# ‫הסוגריים המרובעים תוחמים ‫את כל פעולת ההרכבה ‫ומייצגים את הרשימה המוחזרת.

#‫בעצם, כשאנחנו מזהים בקוד ‫מבנה כזה של לולאה ‫שעוברת על כל האיברים ברצף מסוים, ‫מבצעת עליהם פעולה או משרשרת לרשימה,
# ‫אפשר לקצר את הכתיבה ‫ולהשתמש בהרכבת רשימה.

print()
#ישנם 4 שימושים מתקדמים בהרכבת רשימות

#שימוש בפעולות ומודתות שמכונות מראש
# הפעוהל Upper, הופכת אותיות קטנות לאותיות גדולו באנגלית

letters = ['a','b','c']
upper_letters = [x.upper() for x in letters]
print(upper_letters)

print()

#מקרה נוסף הוא כאשר רוצים לבצע פעולות שמשלבות יותר מרשימה אחת

#‫נניח שאנחנו רוצים לכפול איברים ‫של רשימה אחת באיברים של רשימה אחרת ולקבל רשימה אחת ‫של המכפלות.
# ‫כדי לעשות את זה נצטרך לעבור ‫על האיברים ברשימה אחת ‫ולכפול כל אחד מהם בכל איבר ‫מן הרשימה השנייה.
# כלומר, לממש לולאה בתוך לולאה.
# הדרך הרגילה לביצוע המשימה ‫היא מימוש שתי לולאות אחת בתוך השנייה.
# ‫אנחנו עוברים על כל אחת מן הרשימות ‫ובכל איטרציה ‫מכפילים איבר מהרשימה הראשונה ‫באיבר מהרשימה השנייה.

list1 = [1,2,3]
list2 = [5,6,7]

# the regular way:
mult_list = []
for x in list1:
    for y in list2:
        mult_list.append(x*y)
print(mult_list)

#‫כמו שמרכיבים רשימה אחת ‫בעזרת לולאת for אחת, ‫כך אפשר להרכיב רשימה אחת ‫שהיא תוצר של ביצוע פעולות ‫על שתי רשימות.
# ‫את המעבר על שתי הרשימות ‫מממשים בעזרת לולאה בתוך לולאה.
# ‫וכך נכפיל את כל האיברים בשתי הרשימות ‫זה בזה בשורה אחת בלבד,

mult_list2 = [x*y for x in list1 for y in list2]
print(mult_list2)

print()

# תנאים בתוך הרכבת רשימה

# ‫כשמרכיבים רשימות ‫אפשר להתנות את הפעולה שמתבצעת רק על איברים ‫שעונים על תנאי כלשהו
# ‫ובכך לסנן את האיברים שרלבנטיים.
# ‫לצורך כך אפשר לשלב פקודת תנאי if ‫אחת או יותר ‫לאחר כתיבת הלולאה.

my_list = [1,2,3,4,5]
squared_list = [x*x for x in my_list if x%2==0]
print(squared_list)

#כשרוצים למשל להעלות בריבוע ‫רק את המספרים הזוגיים ברשימה.

print()
#הרכבת רשימות מאפשרת לנו ‫לכתוב תנאי מכונן, ‫
# תנאי בתוך תנאי.
# ‫לדוגמה, נכפיל ב-2 כל איבר ברצף 0 עד 9 ‫אם הוא עונה על שני התנאים ‫שאנחנו רואים כאן,
# ‫גם גדולים מ-3 וגם קטנים מ-7.


nested_list = [x*2 for x in range(10) if x>3 if x<7]
print(nested_list)

print()

#‫לפעמים נרצה לבצע פעולה עבור איברים ‫שעונים על תנאי כלשהו,
# ‫ובנוסף להגדיר פעולה ‫שתתבצע אם התנאי לא מתקיים.
# ‫על ידי הרכבת רשימה ‫במבנה שכולל פקודות if ו-else.
# ‫שימו לב שבמקרה בו נרצה לבצע ‫פעולה אחרת עבור התנאי שאינו מתקיים, ‫פקודות התנאי והפעולות לביצוע ‫ייכתבו לפני הלולאה.

Even_Odd_list = ["Even" if i % 2 ==0 else "Odd" for i in range(10)]
print(Even_Odd_list)

#אנחנו מבקשים שידפיס זוגי/איזגוי עבור אם הערך מתחלק ב 2, או לא, עבור הערכים בטווח עד 10.
# לחילופין יכולנו גם להכניס לשם סתם רשימה עם הערכים מסוימים שעבורים היה עושה את אותה הפעולה

print()
#‫במקרים מסוימים נרצה ליצור רשימה ‫שכל אחד מאיבריה ‫הוא רשימה בפני עצמה.
# ‫כלומר, רשימה של רשימות.
# ‫כדי לייצר רשימה כזו ‫תוחמים את הביטוי שלפני לולאת ה-for ‫בסוגריים מרובעים.
# ‫הביטוי שהוא רשימה בעצמו ‫מייצג איבר ברשימה המורכבת,
# ‫לכן בתוך הסוגריים יש לכתוב ‫ביטוי או פעולה לביצוע עבור כל איבר ‫ולהפריד בין האיברים בפסיקים.

number = [1,2,3,4]
list_of_lists = [[2*x,x] for x in number]
print(list_of_lists)

#אנחנו מקבלים ברשימה החדשה, גם את המספר שהוכפל ב 2, וגם את המספר מהקורי.
# אנחנו יוצרים מלא רשימות קטנות, ועבור כל איבר וכל רשימה מתבצעת הפעולה
# ואת הפעולה אנחנו מריצים על הרשיהמ numbers

#‫בדוגמה לפנינו, בכל איטרציה ‫מוחזרת רשימה שמורכבת משני איברים,
#‫הראשון 2 כפול X והשני X, ‫ומשורשרת לרשימה List_Of_Lists.
print()


sentence = "the quick brown fox"
words = sentence.split()
# הפונקציה הזאת split, מפצלת את המילים ומכניסה אותם כאיברים בודדים לרשימה חדשה
print(words)
secret = [word[0] for word in words if word != "the"]
print(secret)

# קיבלנו רשימה חדשה שמורכבת מהאות הראשונה (במיקום 0) של האיברים ברשימה words שעומדים בתנאי.
# אנחנו מבקשים שהיא תדפיס את האיבר במקום הראשון במילה, כי בפייתון אפשר להתייחס גם ל string כרשימה.
# ואנחנו רוצים את האות/איבר במקום הראשון במילים/רשימות קטנות בתנאי שהמילה הזאת היא לא "the"

print("The coin challange: ")
#אתגר המטבע
#פתחו את עורך הטקסט וממשו פונקציה שנקראת combine_coins.
# הפונקציה מקבלת שני פרמטרים: מחרוזת שנקראת coin המייצגת סימן מטבע (כמו דולר או שקל) ורשימת מספרים שנקראת numbers.
#הפונקציה מחזירה מחרוזת חדשה הבנויה מהמספרים ברשימה numbers, כאשר כל אחד משורשר לסימן המטבע,
# והם מופרדים ביניהם בפסיק ורווח. לפניכם דוגמת קריאה לפונקציה.

combine_coins = [list(map(lambda coin,number : coin + str(number) + ',','$',range(5)))]
# נהפוך את המשתנה השני ל str
print(combine_coins)
#print(combine_coins('$',range(5)))

def combine_coins2 (coins,numbers):
    return ','.join(map(lambda s,n: s+ str(n) ,[coins for i in numbers], numbers))

print(combine_coins2('$',range(5)))
# הפתרון שהם חשבו עליו
#מכינים פונקציה שמקבלת שני ערכים
# והיא מחזירה בעצם פסיק
# לפסיק הזה מצורף משהו ע"י join , שעובד על string
# הוא מחבר בעצם map, שיפעל פעולה שהיא lambda
# הפעולה היא לקבל שני ערכים ולחבר אוצצם, אבל בגלל שאחד הוא מספר, כלומר בפורמט של int, אז נצטרך להמיר אותו ל str
# ואז שני הערכים שהיא תפעל עליהם את הפעולה יהיו:
# סימן המטבע שיעבור על כל הרשימה שלנו שהיא תהיה number
# והיא תחבר את זה לרשימה שלנו numbers

#הערה חשובה
# ‫כתיבה של קוד קצר ‫היא ללא ספק מיוחדת, מעניינת ‫או מגניבה יותר,
# ‫אבל זה לא אומר שזו הדרך ‫הכי טובה לכתוב אותו.
# ‫למרות ששפת פייתון מאפשרת לנו לכתוב ‫קוד בצורה קצרה, ‫כתיבה כזו עשויה לפעמים ‫להפוך את הקוד שלנו ללא קריא ‫
# ועלינו לשים לב שהקיצור ‫לא בא על חשבון הקריאות. ‫
# אז השתמשו בכוח הזה בתבונה ובאחריות.



print()

# הרכבת רשימה (list comprehension) היא שיטה מקוצרת ליצירת רשימת איברים שביניהם חוקיות מסוימת.
# שלוש משימות:
# לעבור על כל המספרים שבין 0 ל-99.
# להעלות בחזקה שלישית כל אחד מהמספרים בטווח.
# לשרשר את המספר בחזקה השלישית לרשימה כך שבסוף התהליך תתקבל רשימה של המספרים הרצויים.

# נתחיל בדוגמת קוד פשוטה שעושה זאת באמצעות לולאה.
power_3_list = []
for i in range(100):
    power_3_list.append((i**3))
print(power_3_list)

#בעזרת map
def power_3(x):
    return x**3
print(list(map(power_3,range(100))))

# בעזרת הרכבת רשימה
power_3_list2 = [i**3 for i in range(100)]
print(power_3_list2)
#לפני שנציג את המבנה הכללי של צורת הכתיבה המקוצרת, נביט בפתרון המקוצר לבעיית החזקות שהצגנו.
# בתוך סוגריים מרובעים נכתוב: תחילה, את הפעולה לביצוע על פי החוקיות בין האיברים.
# ולאחריה, לולאת for שרצה על המספרים בטווח הרצוי.
# במקרה שלנו - הפעולה היא העלאה בחזקה שלישית והטווח הוא המספרים 99-0.

#את הביטוי שבסוגריים קוראים באופן הבא: "בצע את הפעולה של העלאה בשלישית (i ** 3) עבור כל אחד מהאיברים בטווח 99-0".

print()
#מבנה תחבירי של הרכבת רשימה:
'''new_list = [expression for item in sequence]'''
#הרכבת רשימה נעשית באמצעות כתיבת סוגריים מרובעים [] שתוחמים את פעולת ההרכבה כולה ומייצגים את הרשימה המוחזרת ממנה.
# בתוך הסוגריים נכתוב ביטוי המתאר פעולה לביצוע עבור כל איבר ברצף,
# ולאחריו נכתוב לולאת for שעוברת על רצף כלשהו.
# בתום פעולת ההרכבה מוחזרת הרשימה שיצרנו.

#מבנה לולאה "רגילה" שאפשר לקצר למבנה של הרכבת רשימה
'''new_list = []
for item in sequence:
    new_list.append(expression)'''

#בלולאה "רגילה" עוברים על כל איבר (item) ברצף (sequence),
# מבצעים עליו פעולה (expression) ומשרשרים לרשימה (new_list).
# כאשר אתם מזהים מבנה דומה בקוד, תוכלו לקצרו ולהשתמש בשיטת הרכבת רשימות.

print()
#שימוש בפעולה על הרכבת רשימה
#בכדי לבצע פעולה מורכבת על איברי הרצף, לעיתים נרצה להשתמש בפונקציות או במתודות מן המוכן.
# במקרים כאלה, אפשר לשלב פונקציות או מתודות בתוך הביטוי (expression) של הרכבת רשימה.
# דוגמה לכך היא שימוש במתודה upper, שהופכת "אותיות קטנות" ל"אותיות גדולות", עבור רשימת אותיות באנגלית.


letters = ['a', 'b', 'c']
upper_letters = [x.upper() for x in letters]
print(upper_letters)

# הפעולה upper הופכת אותיות קטנות באנגלית לגדולות

print()

#הרכבת רשימה לע פעולה שחלה על שתי רשימות
#result = [expression for item1 in sequence1 for item2 in sequence2 ]

#לדוגמה, נניח שברצוננו לכפול איברים של רשימה אחת באיברים של רשימה אחרת, כך שנקבל רשימה אחת של המכפלות.
# נרצה לעבור על האיברים ברשימה אחת, ולכפול כל אחד בכל איבר מן הרשימה השנייה.
# כלומר לממש לולאה בתוך לולאה.
# נביט בדרך ה"רגילה" למימוש שתי לולאות, אחת בתוך השנייה, ולאחר מכן בדרך המקוצרת במבנה של הרכבת רשימה

#regular way:
list1 = [1, 2, 3]
list2 = [5, 6, 7]
mult_list = []
for x in list1:
     for y in list2:
        mult_list.append( x * y )
print(mult_list)

#בקטע הקוד אפשר לראות שעוברים על כל אחת מן הרשימות ובכל איטרציה מכפילים איבר מהרשימה הראשונה באיבר מהרשימה השנייה.

# The short way:
list1 = [1, 2, 3]
list2 = [5, 6, 7]
mult_list = [x * y for x in list1 for y in list2]
print(mult_list)

print()

# הרכבת רשימה מאיברים שעונים לתנאי כלשהו

#בהרכבת רשימות קיימת אפשרות "לסנן" את איברי הרשימה שבלולאה, ולבצע את הפעולה על האיברים שעונים על תנאי כלשהו בלבד.
# לצורך כך אפשר לשלב פקודת תנאי (if), אחת או יותר, לאחר כתיבת הלולאה.

#מבנה הרכבת רשימה שכולל ביטוי תנאי:
#result = [expression for item in sequence if condition]

#לדוגמה, נרצה להעלות בריבוע אך ורק את המספרים הזוגיים מתוך רשימה כלשהי.

my_list = [1, 2, 3, 4, 5]
squared_list = [x * x for x in my_list if x % 2 == 0 ]
print(squared_list)

#לעיתים נרצה שהאיברים עליהם תבוצע הפעולה יענו על שני תנאים (ואף יותר).
# בהרכבת רשימות נוכל לכתוב תנאי מקונן (תנאי בתוך תנאי).
# לדוגמה, נבצע את הפעולה x * 2 על איברים שעונים על שני התנאים: גם גדולים משלוש וגם קטנים משבע.

nested_list = [x * 2 for x in range(10) if x > 3 if x < 7]
print(nested_list)

#שני התנאים זה כמו גם וגם, בדומה לאמירת המילה "and"

print()

#לעיתים נרצה לבצע פעולה עבור איברים שעונים על תנאי כלשהו (אחד או יותר),
#ובנוסף להגדיר פעולה שתתבצע אם התנאי לא מתקיים.
# נוכל לעשות זאת במבנה של הרכבת רשימה שכולל פקודות if ו-else.

#מבנה הרכבת רשימה שכולל פקודות if ו else:
#result = [ expression1 if condition else expression2 for item in sequence]

even_odd_list = [ "Even" if i % 2 == 0 else "Odd" for i in range(10)]
print(even_odd_list)

print()

#הרכבת רשימה של רשימות

#קיימים מקרים בהם נרצה ליצור רשימה שכל אחד מאיבריה הוא רשימה בפני עצמה, כלומר רשימה של רשימות.
# נכיר את התחביר לכך במבנה של הרכבת רשימה.
# הרכבת רשימה של רשימות מתבצעת באמצעות תחימת הביטוי שלפני לולאת ה-for בסוגריים מרובעים [].
# אם כך, הביטוי בסוגריים המרובעים מייצג איבר ברשימה המורכבת, שהוא רשימה בעצמו.
# לכן בתוך הסוגריים יש לכתוב ביטוי או פעולה לביצוע עבור כל איבר,
# ולהפריד בין האיברים בפסיקים.

numbers = [1, 2, 3, 4]
list_of_lists = [ [2 * x, x] for x in numbers]
print(list_of_lists)

print()
sentence = "the quick brown fox"
words = sentence.split()
secret = [word[0] for word in words if word != "the"]
print(secret)

# קיבלנו רשימה חדשה שמורכבת מהאות הראשונה (במיקום 0) של האיברים ברשימה words שעומדים בתנאי.

