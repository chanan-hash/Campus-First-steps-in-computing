#‫כותבים את המילה השמורה lambda, ‫את הפרמטר או הפרמטרים שהיא מקבלת ‫כשהם מופרדים בפסיקים, נקודתיים,
# ולבסוף ביטוי בעל ערך יחיד ‫שאותו הפונקציה תחזיר, אפילו לא צריך לכתוב return.
import functools

print((lambda x,y: x+y) (2,5))
#הפונקציה מקבלת כפרמטרים את x ואת y ומחזירה את הסכום x+y.
#‫עד עכשיו הגדרנו ‫פונקציית lambda בלי שם, ‫אבל יש אפשרות לתת לה שם ספציפי ‫כדי לקרוא לה במהלך הרצת התכנית.

new_add = lambda x,y : x + y
print(new_add(3,4))

# פשוט ניתן להכניס את הפונקציה laambda, לתוך משתנה. זה אמנם לא נפוץ
# אם היינו צריכים לעשות את זה כנראה היינו צריכים להגדיר את הפונקציה עם def

print((lambda y, x: x in y) ([1, 5, 6, 9], 9))
# הפונקציה מקבלת שני פרמטרים ובודקת הכלה של הפרמטר השני בראשון. כיוון שהמספר 9 אכן נכלל ברשימה שהועברה כארגומנט, מתקבל הערך אמת.
# בלבלו פה ועשו הפוך מה נכנס במה, נשים לב ש X הוא המשתנה השני בהתחלה, ובעצם אחרי זה אנחנו בודקים אם X נמצא ב Y (שהוא הערך הראשון)
print()

# פונקציית reduce עם lambda
shopping_list = [200, 120, 330, 50]
print(functools.reduce( lambda x, y: x + y , shopping_list))
print()
#‫נכיר שלוש דרכים נפוצות לשימוש בפונקציית lambda.

# השימוש הראשון הוא שימוש חד-פעמי, ‫מימוש פונקציה קצרה שאנחנו צופים ‫שלא נשתמש בה שוב בתכנית.
print("first lambda")

shop_list = [2,4,3,5,6,7]
print(functools.reduce(lambda x,y: x+y,shop_list))

#‫ההגדרה הפשוטה והקצרה ‫מתאימה לשימוש חד-פעמי ‫כי הפעולה ש-lambda מבצעת ‫היא ביטוי יחיד.

print()
print("second lambda")
#‫השימוש השני הוא העברת פונקציה ‫כארגומט לפונקציה או למתודה אחרת.
# ‫map, filter ו-reduce ‫שהכרנו ביחידה הקודמת ‫הן דוגמאות טובות.

my_list = [0,1,2,3,4,5,6,7]
print(list(filter(lambda x : x % 2 ==0,my_list)))

#‫דוגמה לפונקציה נוספת ‫היא הפונקציה המובנית sorted.
# ‫sorted היא פונקציה שמשמשת ‫למיון ערכים ושהיא יכולה לקבל מפתח למיון ‫כפרמטר אופציונאלי.‫
# המפתח יכול להיות פונקציה כלשהי ‫שעל פיה אפשר להגדיר ‫את החוקיות של המיון.

print()
#‫נניח שאנחנו רוצים למיין ‫את הטאפלים האלה על פי הערך המספרי ‫של האיבר במיקום השני בכל טאפל.
# כדי לעשות את זה נכתוב פונקציית lambda ‫שתחזיר את האיבר השני בכל טאפל, ‫ונעביר אותה כמפתח לפונקציה sorted.
list_of_tuples = [(2,2),(3,4),(4,1),(1,3)]
print(sorted(list_of_tuples,key= lambda x :x[1]))
# הערך במקום ה 1, זה בעצם הערך במקום השני, כי אנחנו מתחילים את הספירה מ 0
# בעצם אמרנו שאנחנו רוצים לסדר לפי מפתח פונקציה מסוים שזה התנאי של הערך השני


print()
print("third lambda")
#‫שימוש שלישי שנכיר לפונקציית lambda הוא הגדרה שלה כאיבר ‫ישירות בתוך מבנה נתונים, כמו טאפל, מילון או רשימה.
# בשונה מפונקציה רגילה שאפשר אך ורק לכתוב את שמה ‫כאיבר במבנה נתונים, ‫את פונקציית ה-lambda ‫אפשר גם להגדיר ישירות באיבר.

#‫לדוגמה, ניצור רשימה שכל איבר שלה ‫הוא פונקציית lambda ‫שמעלה מספר בחזקות בסדר עולה.
clac_sqrt_list = [lambda x : x**2, lambda x: x**3, lambda x: x**4]
for func in clac_sqrt_list:
    print(func(3))
#‫כך נוכל למצוא את החזקות ‫למספר 3 נניח, ‫על ידי שימוש בלולאה ‫וקריאה לכל איבר ברשימה.
